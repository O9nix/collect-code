#!/usr/bin/env node
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    extensions: ['.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.scss', '.json'], // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    excludeDirs: ['node_modules', '.git', 'dist', 'build', '.next', '.nuxt', 'coverage', '.vscode', '.idea'], // –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    excludeFiles: ['package-lock.json', 'yarn.lock', '.DS_Store'], // –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    maxFileSize: 10 * 1024 * 1024 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10MB)
};

function shouldExcludeDir(dirName) {
    return config.excludeDirs.includes(dirName);
}

function shouldIncludeFile(fileName) {
    const ext = path.extname(fileName).toLowerCase();
    return config.extensions.includes(ext) && 
           !config.excludeFiles.includes(fileName);
}

function getAllCodeFiles(dir, fileList = []) {
    try {
        const files = fs.readdirSync(dir);
        
        files.forEach(file => {
            const filePath = path.join(dir, file);
            const stat = fs.statSync(filePath);
            
            if (stat.isDirectory() && !shouldExcludeDir(path.basename(filePath))) {
                getAllCodeFiles(filePath, fileList);
            } else if (stat.isFile() && shouldIncludeFile(file)) {
                const fileSize = stat.size;
                if (fileSize <= config.maxFileSize) {
                    fileList.push(filePath);
                } else {
                    console.log(`–ü—Ä–æ–ø—É—â–µ–Ω –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: ${filePath} (${(fileSize / 1024 / 1024).toFixed(2)} MB)`);
                }
            }
        });
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error.message);
    }
    
    return fileList;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
function readFileContent(filePath) {
    try {
        return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return '';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
function createFileHeader(filePath, relativePath, fileSize) {
    const separator = '='.repeat(100);
    const fileStats = fs.statSync(filePath);
    const fileSizeKB = (fileStats.size / 1024).toFixed(2);
    
    return `\n\n${separator}\n` +
           `–§–∞–π–ª: ${relativePath}\n` +
           `–†–∞–∑–º–µ—Ä: ${fileSizeKB} KB\n` +
           `–î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${fileStats.mtime.toLocaleString()}\n` +
           `${separator}\n\n`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
function isBinaryFile(filePath) {
    try {
        const buffer = fs.readFileSync(filePath, { encoding: null });
        for (let i = 0; i < Math.min(512, buffer.length); i++) {
            if (buffer[i] === 0) {
                return true; // –ù–∞–π–¥–µ–Ω –Ω—É–ª–µ–≤–æ–π –±–∞–π—Ç - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª
            }
        }
        return false;
    } catch (error) {
        return true; // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å - —Å—á–∏—Ç–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–º
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function collectCode(rootDir, outputFile = 'all_code.txt') {
    try {
        console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤: ${path.resolve(rootDir)}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã
        const codeFiles = getAllCodeFiles(rootDir);
        
        if (codeFiles.length === 0) {
            console.log('‚ùå –ö–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${codeFiles.length} —Ñ–∞–π–ª–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...`);
        
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        fs.writeFileSync(outputFile, '');
        
        let totalFiles = 0;
        let totalLines = 0;
        let totalSize = 0;
        const fileStats = {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        config.extensions.forEach(ext => {
            fileStats[ext] = { count: 0, lines: 0 };
        });
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        codeFiles.forEach(filePath => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±–∏–Ω–∞—Ä–Ω—ã–π –ª–∏ —Ñ–∞–π–ª
            if (isBinaryFile(filePath)) {
                console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª: ${path.relative(rootDir, filePath)}`);
                return;
            }
            
            const relativePath = path.relative(rootDir, filePath);
            const fileContent = readFileContent(filePath);
            
            if (fileContent) {
                const fileExt = path.extname(filePath).toLowerCase();
                const lines = fileContent.split('\n').length;
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞
                const header = createFileHeader(filePath, relativePath, fileContent.length);
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                fs.appendFileSync(outputFile, header);
                fs.appendFileSync(outputFile, fileContent);
                
                // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                totalLines += lines;
                totalFiles++;
                totalSize += fileContent.length;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
                if (fileStats[fileExt]) {
                    fileStats[fileExt].count++;
                    fileStats[fileExt].lines += lines;
                }
                
                console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω: ${relativePath} (${lines} —Å—Ç—Ä–æ–∫)`);
            }
        });
        
        // –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        let summary = `üìä –°–í–û–î–ö–ê –ü–†–û–ï–ö–¢–ê\n`;
        summary += `=`.repeat(50) + `\n`;
        summary += `üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}\n`;
        summary += `üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${totalLines}\n`;
        summary += `üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024).toFixed(2)} KB\n`;
        summary += `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString()}\n`;
        summary += `üìç –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${path.resolve(rootDir)}\n`;
        summary += `=`.repeat(50) + `\n\n`;
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º
        summary += `üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n`;
        summary += `-`.repeat(30) + `\n`;
        for (const [ext, stats] of Object.entries(fileStats)) {
            if (stats.count > 0) {
                summary += `${ext}: ${stats.count} —Ñ–∞–π–ª–æ–≤, ${stats.lines} —Å—Ç—Ä–æ–∫\n`;
            }
        }
        summary += `-`.repeat(30) + `\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        const existingContent = fs.readFileSync(outputFile, 'utf8');
        fs.writeFileSync(outputFile, summary + existingContent);
        
        console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputFile}`);
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
        console.log(`üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${totalLines}`);
        console.log(`üíæ –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${(fs.statSync(outputFile).size / 1024).toFixed(2)} KB`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
    console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node collect-code.js [–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è] [–∏–º—è_—Ñ–∞–π–ª–∞]

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è    - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
  –∏–º—è_—Ñ–∞–π–ª–∞     - –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all_code.txt)

–ü—Ä–∏–º–µ—Ä—ã:
  node collect-code.js
  node collect-code.js ./my-project/
  node collect-code.js ./src/ result.txt
  node collect-code.js ../project/ project_code.txt
    `);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if (process.argv.includes('--help') || process.argv.includes('-h')) {
    showHelp();
    process.exit(0);
}

const targetDirectory = process.argv[2] || './';
const outputFile = process.argv[3] || 'all_code.txt';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if (!fs.existsSync(targetDirectory)) {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${targetDirectory}`);
    process.exit(1);
}

if (!fs.statSync(targetDirectory).isDirectory()) {
    console.error(`‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: ${targetDirectory}`);
    process.exit(1);
}

collectCode(targetDirectory, outputFile);