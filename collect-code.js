#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultConfig = {
    extensions: ['.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.scss', '.json'],
    excludeDirs: ['node_modules', '.git', 'dist', 'build', '.next', '.nuxt', 'coverage', '.vscode', '.idea'],
    excludeFiles: ['package-lock.json', 'yarn.lock', '.DS_Store'],
    maxFileSize: 10 * 1024 * 1024 // 10MB
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞
function loadConfigFromFile(configPath) {
    try {
        if (fs.existsSync(configPath)) {
            const configFile = fs.readFileSync(configPath, 'utf8');
            const userConfig = JSON.parse(configFile);
            return { ...defaultConfig, ...userConfig };
        }
    } catch (error) {
        console.error(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ ${configPath}:`, error.message);
    }
    return defaultConfig;
}

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function parseConfigArgs(args) {
    const config = { ...defaultConfig };
    const positionalArgs = [];
    
    for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        
        if (arg === '--extensions' && i + 1 < args.length) {
            config.extensions = args[i + 1].split(',').map(ext => {
                const trimmed = ext.trim();
                return trimmed.startsWith('.') ? trimmed.toLowerCase() : '.' + trimmed.toLowerCase();
            });
            i++;
        } else if (arg === '--exclude-dirs' && i + 1 < args.length) {
            config.excludeDirs = args[i + 1].split(',').map(dir => dir.trim());
            i++;
        } else if (arg === '--exclude-files' && i + 1 < args.length) {
            config.excludeFiles = args[i + 1].split(',').map(file => file.trim());
            i++;
        } else if (arg === '--max-size' && i + 1 < args.length) {
            const size = parseFloat(args[i + 1]);
            if (!isNaN(size)) {
                config.maxFileSize = size * 1024 * 1024; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ MB –≤ bytes
            }
            i++;
        } else if (arg === '--config' && i + 1 < args.length) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç --config
            i++;
        } else if (!arg.startsWith('--')) {
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            positionalArgs.push(arg);
        }
    }
    
    return { config, positionalArgs };
}

function shouldExcludeDir(dirName, excludeDirs) {
    return excludeDirs.includes(dirName);
}

function shouldIncludeFile(fileName, extensions, excludeFiles) {
    const ext = path.extname(fileName).toLowerCase();
    return extensions.includes(ext) && !excludeFiles.includes(fileName);
}

function getAllCodeFiles(dir, config, fileList = []) {
    try {
        const files = fs.readdirSync(dir);
        
        files.forEach(file => {
            const filePath = path.join(dir, file);
            const stat = fs.statSync(filePath);
            
            if (stat.isDirectory() && !shouldExcludeDir(path.basename(filePath), config.excludeDirs)) {
                getAllCodeFiles(filePath, config, fileList);
            } else if (stat.isFile() && shouldIncludeFile(file, config.extensions, config.excludeFiles)) {
                const fileSize = stat.size;
                if (fileSize <= config.maxFileSize) {
                    fileList.push(filePath);
                } else {
                    console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –±–æ–ª—å—à–æ–π —Ñ–∞–π–ª: ${filePath} (${(fileSize / 1024 / 1024).toFixed(2)} MB)`);
                }
            }
        });
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dir}:`, error.message);
    }
    
    return fileList;
}

function readFileContent(filePath) {
    try {
        return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return '';
    }
}

function createFileHeader(filePath, relativePath) {
    const separator = '='.repeat(100);
    const fileStats = fs.statSync(filePath);
    const fileSizeKB = (fileStats.size / 1024).toFixed(2);
    
    return `\n\n${separator}\n` +
           `üìÑ –§–∞–π–ª: ${relativePath}\n` +
           `üìä –†–∞–∑–º–µ—Ä: ${fileSizeKB} KB\n` +
           `üìÖ –î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${fileStats.mtime.toLocaleString()}\n` +
           `${separator}\n\n`;
}

function isBinaryFile(filePath) {
    try {
        const buffer = fs.readFileSync(filePath, { encoding: null });
        for (let i = 0; i < Math.min(512, buffer.length); i++) {
            if (buffer[i] === 0) {
                return true;
            }
        }
        return false;
    } catch (error) {
        return true;
    }
}

function collectCode(rootDir, outputFile = 'all_code.txt', config) {
    try {
        console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤: ${path.resolve(rootDir)}`);
        console.log(`‚öôÔ∏è  –†–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${config.extensions.join(', ')}`);
        console.log(`üö´ –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${config.excludeDirs.join(', ')}`);
        
        const codeFiles = getAllCodeFiles(rootDir, config);
        
        if (codeFiles.length === 0) {
            console.log('‚ùå –ö–æ–¥–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${codeFiles.length} —Ñ–∞–π–ª–æ–≤. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...`);
        
        fs.writeFileSync(outputFile, '');
        
        let totalFiles = 0;
        let totalLines = 0;
        let totalSize = 0;
        const fileStats = {};
        
        config.extensions.forEach(ext => {
            fileStats[ext] = { count: 0, lines: 0 };
        });
        
        codeFiles.forEach(filePath => {
            if (isBinaryFile(filePath)) {
                const relativePath = path.relative(rootDir, filePath);
                console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª: ${relativePath}`);
                return;
            }
            
            const relativePath = path.relative(rootDir, filePath);
            const fileContent = readFileContent(filePath);
            
            if (fileContent) {
                const fileExt = path.extname(filePath).toLowerCase();
                const lines = fileContent.split('\n').length;
                
                const header = createFileHeader(filePath, relativePath);
                
                fs.appendFileSync(outputFile, header);
                fs.appendFileSync(outputFile, fileContent);
                
                totalLines += lines;
                totalFiles++;
                totalSize += fileContent.length;
                
                if (fileStats[fileExt]) {
                    fileStats[fileExt].count++;
                    fileStats[fileExt].lines += lines;
                }
                
                console.log(`üìÑ ${relativePath} (${lines} —Å—Ç—Ä–æ–∫)`);
            }
        });
        
        let summary = `üìä –°–í–û–î–ö–ê –ü–†–û–ï–ö–¢–ê\n`;
        summary += `=`.repeat(50) + `\n`;
        summary += `üìÅ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}\n`;
        summary += `üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${totalLines}\n`;
        summary += `üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024).toFixed(2)} KB\n`;
        summary += `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleString()}\n`;
        summary += `üìç –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${path.resolve(rootDir)}\n`;
        summary += `=`.repeat(50) + `\n\n`;
        
        summary += `‚öôÔ∏è  –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø\n`;
        summary += `-`.repeat(30) + `\n`;
        summary += `–†–∞—Å—à–∏—Ä–µ–Ω–∏—è: ${config.extensions.join(', ')}\n`;
        summary += `–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${config.excludeDirs.join(', ')}\n`;
        summary += `–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${config.excludeFiles.join(', ')}\n`;
        summary += `–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(config.maxFileSize / 1024 / 1024).toFixed(2)} MB\n`;
        summary += `-`.repeat(30) + `\n\n`;
        
        summary += `üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n`;
        summary += `-`.repeat(30) + `\n`;
        for (const [ext, stats] of Object.entries(fileStats)) {
            if (stats.count > 0) {
                summary += `${ext}: ${stats.count} —Ñ–∞–π–ª–æ–≤, ${stats.lines} —Å—Ç—Ä–æ–∫\n`;
            }
        }
        summary += `-`.repeat(30) + `\n`;
        
        const existingContent = fs.readFileSync(outputFile, 'utf8');
        fs.writeFileSync(outputFile, summary + existingContent);
        
        console.log(`\n‚úÖ –ì–æ—Ç–æ–≤–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputFile}`);
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalFiles}`);
        console.log(`üìù –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${totalLines}`);
        console.log(`üíæ –†–∞–∑–º–µ—Ä –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: ${(fs.statSync(outputFile).size / 1024).toFixed(2)} KB`);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏:', error.message);
    }
}

function showHelp() {
    console.log(`
üõ†Ô∏è  –°–ë–û–†–©–ò–ö –ö–û–î–ê –ü–†–û–ï–ö–¢–ê

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: collect-code [–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è] [–∏–º—è_—Ñ–∞–π–ª–∞] [–æ–ø—Ü–∏–∏]

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
  –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è              –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
  –∏–º—è_—Ñ–∞–π–ª–∞               –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all_code.txt)

–û–ø—Ü–∏–∏:
  --extensions ext1,ext2  –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
  --exclude-dirs dir1,dir2  –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
  --exclude-files file1,file2  –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
  --max-size number       –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ MB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)
  --config file.json      –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  --help, -h              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  collect-code
  collect-code ./my-project/
  collect-code ./src/ result.txt
  collect-code --extensions .js,.ts,.css
  collect-code --exclude-dirs node_modules,build,temp
  collect-code --max-size 5
  collect-code --config my-config.json
  collect-code ./project/ --extensions .py,.js --exclude-dirs venv
    `);
}

function main() {
    const args = process.argv.slice(2);
    
    if (args.includes('--help') || args.includes('-h')) {
        showHelp();
        process.exit(0);
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    let config = { ...defaultConfig };
    let configPath = './collect-code-config.json';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ --config –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    for (let i = 0; i < args.length; i++) {
        if (args[i] === '--config' && i + 1 < args.length) {
            configPath = args[i + 1];
            break;
        }
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const fileConfig = loadConfigFromFile(configPath);
    config = { ...config, ...fileConfig };
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const { config: cliConfig, positionalArgs } = parseConfigArgs(args);
    config = { ...config, ...cliConfig };
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    let targetDirectory = './';
    let outputFile = 'all_code.txt';
    
    if (positionalArgs.length > 0) {
        targetDirectory = positionalArgs[0];
    }
    if (positionalArgs.length > 1) {
        outputFile = positionalArgs[1];
    }
    
    console.log(`üìÇ –¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${targetDirectory}`);
    console.log(`üìÑ –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: ${outputFile}`);
    
    if (!fs.existsSync(targetDirectory)) {
        console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${targetDirectory}`);
        process.exit(1);
    }
    
    if (!fs.statSync(targetDirectory).isDirectory()) {
        console.error(`‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: ${targetDirectory}`);
        process.exit(1);
    }
    
    collectCode(targetDirectory, outputFile, config);
}

main();